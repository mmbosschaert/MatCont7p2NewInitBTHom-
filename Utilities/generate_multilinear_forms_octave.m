function suc = generate_multilinear_forms_octave(system_name, system, xx, pars, order, outputdir)

dim_phase = length(xx); % phase dimension
dim_par = length(pars); % parameter dimension

%% vectors
v1 = sym('v1', [dim_phase, 1]);
v2 = sym('v2', [dim_phase, 1]);
v3 = sym('v3', [dim_phase, 1]);
p1 = sym('p1', [dim_par, 1]);
p2 = sym('p2', [dim_par, 1]);
p3 = sym('p3', [dim_par, 1]);

%% calculuate multilinear forms
A  = jacobian(system, xx);
B  = jacobian(A*v1, xx)*v2;
C  = jacobian(B, xx)*v3;
J1 = jacobian(system, pars);
J2 = jacobian(J1*p1, pars)*p2;
J3 = jacobian(J2, pars)*p3;
B1 = jacobian(B, pars)*p1;
A1 = jacobian(A*v1, pars)*p1;
A2 = jacobian(A1, pars)*p2;

%% create system directory if not exist
system_dir = [outputdir, system_name,'/'];
if ~exist(system_dir,'dir')
   mkdir(system_dir);
end

%% temporally write multilinear forms to files in the directory of the defined system
A  = matlabFunction(A,  'vars', [xx, pars]);
B  = matlabFunction(B,  'vars', [xx, pars, v1.', v2.']);
C  = matlabFunction(C,  'vars', [xx, pars, v1.', v2.', v3.']);
J1 = matlabFunction(J1, 'vars', [xx, pars]);
J2 = matlabFunction(J2, 'vars', [xx, pars, p1.', p2.']);
J3 = matlabFunction(J3, 'vars', [xx, pars, p1.', p2.', p3.']);
B1 = matlabFunction(B1, 'vars', [xx, pars, v1.', v2.', p1.']);
A1 = matlabFunction(A1, 'vars', [xx, pars, v1.', p1.']);
A2 = matlabFunction(A2, 'vars', [xx, pars, v1.', p1.', p2.']);

%% export all files to a single file
% open file to write to and print header to file
fidOut=fopen([outputdir, system_name, '_multilinearforms.m'],'w');
fprintf(fidOut, strcat('function F = %s_multilinearforms\n', ...
                   'F.A  = @A;\n', ...
                   'F.B  = @B;\n', ...
                   'F.C  = @C;\n', ...
                   'F.J1 = @J1;\n', ...
                   'F.J2 = @J2;\n', ...
                   'F.J3 = @J3;\n', ...
                   'F.B1 = @B1;\n', ...
                   'F.A1 = @A1;\n', ...
                   'F.A2 = @A2;\n', ...
                   '\n', ...
                   'function v = A(x,p)  \n', ...
                   'x = vec2cell(x'');      \n', ...
                   'p = vec2cell(p'');      \n', ...
                   'v = A_gnuplot(x{:},p{:}); \n\n', ...
                   anonymous2function(A, 'A_gnuplot'), ...
                   '\n\n', ...
                   'function v = B(x,p,v1,v2)  \n', ...
                   'x = vec2cell(x'');      \n', ...
                   'p = vec2cell(p'');      \n', ...
                   'v1 = vec2cell(v1);      \n', ...
                   'v2 = vec2cell(v2);      \n', ...
                   'v = B_gnuplot(x{:},p{:},v1{:},v2{:}); \n\n', ...
                   anonymous2function(B, 'B_gnuplot'), ...
                   '\n\n', ...
                   'function v = C(x,p,v1,v2,v3)  \n', ...
                   'x = vec2cell(x'');      \n', ...
                   'p = vec2cell(p'');      \n', ...
                   'v1 = vec2cell(v1);      \n', ...
                   'v2 = vec2cell(v2);      \n', ...
                   'v3 = vec2cell(v3);      \n', ...
                   'v = C_gnuplot(x{:},p{:},v1{:},v2{:},v3{:}); \n\n', ...
                   anonymous2function(C, 'C_gnuplot'), ...
                   '\n\n', ...
                   'function v = J1(x,p)  \n', ...
                   'x = vec2cell(x'');      \n', ...
                   'p = vec2cell(p'');      \n', ...
                   'v = J1_gnuplot(x{:},p{:}); \n\n', ...
                   anonymous2function(J1, 'J1_gnuplot'), ...
                   '\n\n', ...
                   'function v =J2(x,p,v1,v2)  \n', ...
                   'x = vec2cell(x'');      \n', ...
                   'p = vec2cell(p'');      \n', ...
                   'v1 = vec2cell(v1);      \n', ...
                   'v2 = vec2cell(v2);      \n', ...
                   'v = J2_gnuplot(x{:},p{:},v1{:},v2{:}); \n\n', ...
                   anonymous2function(J2, 'J2_gnuplot'), ...
                   '\n\n', ...
                   'function v = J3(x,p,v1,v2,v3)  \n', ...
                   'x = vec2cell(x'');      \n', ...
                   'p = vec2cell(p'');      \n', ...
                   'v1 = vec2cell(v1);      \n', ...
                   'v2 = vec2cell(v2);      \n', ...
                   'v3 = vec2cell(v3);      \n', ...
                   'v = J3_gnuplot(x{:},p{:},v1{:},v2{:},v3{:}); \n\n', ...
                   anonymous2function(J3, 'J3_gnuplot'), ...
                   '\n\n', ...
                   'function v = B1(x,p,v1,v2,v3)  \n', ...
                   'x = vec2cell(x'');      \n', ...
                   'p = vec2cell(p'');      \n', ...
                   'v1 = vec2cell(v1);      \n', ...
                   'v2 = vec2cell(v2);      \n', ...
                   'v3 = vec2cell(v3);      \n', ...
                   'v = B1_gnuplot(x{:},p{:},v1{:},v2{:},v3{:}); \n\n', ...
                   anonymous2function(B1, 'B1_gnuplot'), ...
                   '\n\n', ...
                   'function v =A1(x,p,v1,v2)  \n', ...
                   'x = vec2cell(x'');      \n', ...
                   'p = vec2cell(p'');      \n', ...
                   'v1 = vec2cell(v1);      \n', ...
                   'v2 = vec2cell(v2);      \n', ...
                   'v = A1_gnuplot(x{:},p{:},v1{:},v2{:}); \n\n', ...
                   anonymous2function(A1, 'A1_gnuplot'), ...
                   '\n\n', ...
                   'function v = A2(x,p,v1,v2,v3)  \n', ...
                   'x = vec2cell(x'');      \n', ...
                   'p = vec2cell(p'');      \n', ...
                   'v1 = vec2cell(v1);      \n', ...
                   'v2 = vec2cell(v2);      \n', ...
                   'v3 = vec2cell(v3);      \n', ...
                   'v = A2_gnuplot(x{:},p{:},v1{:},v2{:},v3{:}); \n\n', ...
                   anonymous2function(A2, 'A2_gnuplot'), ...
                   '\n\n', ...
                   'function v_cell = vec2cell(v)\n', ... 
                   'v_cell = mat2cell(v,ones(1,numel(v)),1);'), system_name);

fclose(fidOut);
suc = 1;
end

function str =  anonymous2function(multilinearform, functionname)
str = ['function v = ', regexprep(regexprep(regexprep(char(multilinearform), '@', functionname), '\[', '\nv = ['), '\]', '];')];
end

