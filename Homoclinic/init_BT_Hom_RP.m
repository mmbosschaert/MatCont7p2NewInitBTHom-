function [ups, p, dalphadepsilon] = init_BT_Hom_RP(odefile, bt, ap, options)

global homds cds

%% 3. Compute normal form coefficients
bt = BT_nmfm(odefile, bt, ap);
a  = bt.nmfm.a;
b  = bt.nmfm.b;
d  = bt.nmfm.d;
e  = bt.nmfm.e;
a1 = bt.nmfm.a1;
b1 = bt.nmfm.b1;
K10   = bt.nmfm.K10;
K01   = bt.nmfm.K01;
K02   = bt.nmfm.K02;
K11   = bt.nmfm.K11;
K03   = bt.nmfm.K03;
q0    = bt.nmfm.q0;
q1    = bt.nmfm.q1;
H0010 = bt.nmfm.H0010;
H0001 = bt.nmfm.H0001;
H2000 = bt.nmfm.H2000;
H1100 = bt.nmfm.H1100;
H0200 = bt.nmfm.H0200;
H1010 = bt.nmfm.H1010;
H1001 = bt.nmfm.H1001;
H0110 = bt.nmfm.H0110;
H0101 = bt.nmfm.H0101;
H0002 = bt.nmfm.H0002;
H0011 = bt.nmfm.H0011;
H3000 = bt.nmfm.H3000;
H2100 = bt.nmfm.H2100;
H1101 = bt.nmfm.H1101;
H2001 = bt.nmfm.H2001;
H0003 = bt.nmfm.H0003;
H1002 = bt.nmfm.H1002;
H0102 = bt.nmfm.H0102;
if options.messages
    disp('BT normal form coefficients:')
    fprintf('a=%d,\t b=%d\n', a, b);
end

%% Set amplitude and TTolerance
if ~isempty(options.amplitude)
    amplitude = options.amplitude;
    eps  = sqrt(amplitude*abs(a)/6);
else
    eps = a/b*options.perturbationparameter;
    amplitude = eps^2/abs(a)*6;
end
if ~isempty(options.TTolerance)
    TTolerance = options.TTolerance;
else
    TTolerance = amplitude*options.amplitudeTToleranceRatio;
end

%% 8. Initial cycle
% a) The initical approximation of the parameters
beta1 = -4/a*eps^4;
tau0 = 10/7;
tau2 = 1/a*(100/49*b1 - 4*e/b) + 1/a^2*(288/2401*b^2-50*b*a1/49 + 146/49*d);
beta2 = b/a*(tau0 + tau2*eps^2)*eps^2;
alpha= K10*beta1 + K01*beta2 + 1/2*K02*beta2.^2 + K11*beta1.*beta2 + ...
    1/6*K03*beta2^3;
p = bt.par;
p(ap) = p(ap) + alpha;  % tmpfreep=tmpfreep+alpha;
homds.P0 = p;

%% b) The initial half-return time value T
% |w0(-inf,eps)-w0(T,eps)|=TTolerance=>(6*norm(q0)*eps^2/|a|)*tanh(eps*T)^2=k
% where norm(q0)=1.
% notice that TTolerance is Tolerance (and k) in Al-Hdabat et.al. 2016.
% notice furthermore that T was calculated incorrect in the code
homds.T = 1/eps*asech(sqrt(TTolerance/amplitude));
if options.messages
    fprintf('The initial perturbation parameter:  %d\n', eps);
    fprintf('The initial amplitude: %g\n', amplitude);
    fprintf('T: %g\n', homds.T);
end

%% c) THE INITIAL APPROXIMATION OF CYCLE
t = (2*homds.finemsh - 1) * (homds.T);
% transformation of time \xi to s
switch options.order
  case 0
    u  = @(s) 2*(1-3*sech(s).^2);
    v  = @(s) 2*(6*sech(s).^2.*tanh(s));
  case 1
    u  = @(s) 2*(1-3*sech(s).^2) + (-72/7).*a.^(-1).*b.*eps.*log(cosh(s)).*sech(s).^2.*tanh(s);
    v  = @(s) 2*(6*sech(s).^2.*tanh(s)) + ...
    (36/7).*a.^(-1).*b.*eps.*(1+(-4).*log(cosh(s))+cosh(2.*s).*((-1)+2.*log(cosh(s)))).*sech(s).^4;
  case 2
    EPS = 0;
    u  = @(s) (-4)+(-72/7).*a.^(-1).*b.*eps.*log(cosh(s)).*sech(s).^2.*tanh(s)+6.* ...
    tanh(s).^2+(6/2401).*a.^(-3).*EPS.^3.*sech(s).^2.*(42.*b.*((-35).* ...
    a1.*b+36.*b.^2+(-98).*d).*s.*(1+(-2).*log(cosh(s))+((-1)+3.*log( ...
    cosh(s))).*sech(s).^2)+((-21).*b.*(78.*b.^2+49.*d)+9604.*a.*e+6.* ...
    b.*log(cosh(s)).*(1225.*a1.*b+312.*b.^2+(-980).*(a.*b1+3.*d)+( ...
    -336).*b.^2.*((-3)+log(cosh(s))).*log(cosh(s)))+7.*(234.*b.^3+ ...
    147.*b.*d+(-1372).*a.*e+108.*b.*log(cosh(s)).*((-6).*b.^2+49.*d+ ...
    2.*b.^2.*log(cosh(s)).*((-7)+4.*log(cosh(s))))).*sech(s).^2).* ...
    tanh(s))+(1/49).*a.^(-2).*eps.^2.*((-14).*(5.*a1.*b+7.*d)+27.*((-10) ...
    .*b.^2+49.*d+8.*b.^2.*log(cosh(s)).*((-2)+3.*log(cosh(s)))).*sech( ...
    s).^4+6.*sech(s).^2.*(7.*(5.*a1.*b+6.*b.^2+(-35).*d)+(-72).*b.^2.* ...
    ((-1)+log(cosh(s))).*log(cosh(s))+(35.*a1.*b+(-36).*b.^2+98.*d).* ...
    s.*tanh(s)));
    v  = @(s) (36/7).*a.^(-1).*b.*eps.*(1+(-4).*log(cosh(s))+cosh(2.*s).*((-1)+2.* ...
    log(cosh(s)))).*sech(s).^4+12.*sech(s).^2.*tanh(s)+(3/49).*a.^(-2) ...
    .*eps.^2.*sech(s).^4.*((-2).*(35.*a1.*b+(-36).*b.^2+98.*d).*s.*((-2) ...
    +cosh(2.*s))+((-35).*a1.*b+(-48).*b.^2+588.*d+144.*b.^2.*((-2)+ ...
    log(cosh(s))).*log(cosh(s))).*sinh(2.*s)+(-36).*((-6).*b.^2+49.*d+ ...
    4.*b.^2.*log(cosh(s)).*((-7)+6.*log(cosh(s)))).*tanh(s))+(6/2401) ...
    .*a.^(-3).*EPS.^3.*sech(s).^2.*(6.*b.*(980.*a1.*b+1110.*b.^2+(-49).* ...
    (20.*a.*b1+67.*d))+(-19208).*a.*e+24.*b.*log(cosh(s)).*((-490).* ...
    a1.*b+222.*b.^2+490.*a.*b1+1813.*d+84.*b.^2.*log(cosh(s)).*((-9)+ ...
    2.*log(cosh(s))))+((-5880).*a1.*b.^2+(-19386).*b.^3+147.*b.*(40.* ...
    a.*b1+351.*d)+67228.*a.*e+(-36).*b.*log(cosh(s)).*((-490).*a1.*b+ ...
    138.*b.^2+490.*a.*b1+5929.*d+168.*b.^2.*log(cosh(s)).*((-14)+5.* ...
    log(cosh(s))))).*sech(s).^2+7.*(1818.*b.^3+(-4557).*b.*d+(-6860).* ...
    a.*e+108.*b.*log(cosh(s)).*((-2).*b.^2+245.*d+2.*b.^2.*log(cosh(s) ...
    ).*((-47)+20.*log(cosh(s))))).*sech(s).^4+42.*b.*(35.*a1.*b+(-36) ...
    .*b.^2+98.*d).*s.*(4+(-4).*log(cosh(s))+((-7)+12.*log(cosh(s))).* ...
    sech(s).^2).*tanh(s));
  case 3
    u  = @(s) (-4)+(-72/7).*a.^(-1).*b.*eps.*log(cosh(s)).*sech(s).^2.*tanh(s)+6.* ...
      tanh(s).^2+(6/2401).*a.^(-3).*eps.^3.*sech(s).^2.*(42.*b.*((-35).* ...
      a1.*b+36.*b.^2+(-98).*d).*s.*(1+(-2).*log(cosh(s))+((-1)+3.*log( ...
      cosh(s))).*sech(s).^2)+((-21).*b.*(78.*b.^2+49.*d)+9604.*a.*e+6.* ...
      b.*log(cosh(s)).*(1225.*a1.*b+312.*b.^2+(-980).*(a.*b1+3.*d)+( ...
      -336).*b.^2.*((-3)+log(cosh(s))).*log(cosh(s)))+7.*(234.*b.^3+ ...
      147.*b.*d+(-1372).*a.*e+108.*b.*log(cosh(s)).*((-6).*b.^2+49.*d+ ...
      2.*b.^2.*log(cosh(s)).*((-7)+4.*log(cosh(s))))).*sech(s).^2).* ...
      tanh(s))+(1/49).*a.^(-2).*eps.^2.*((-14).*(5.*a1.*b+7.*d)+27.*((-10) ...
      .*b.^2+49.*d+8.*b.^2.*log(cosh(s)).*((-2)+3.*log(cosh(s)))).*sech( ...
      s).^4+6.*sech(s).^2.*(7.*(5.*a1.*b+6.*b.^2+(-35).*d)+(-72).*b.^2.* ...
      ((-1)+log(cosh(s))).*log(cosh(s))+(35.*a1.*b+(-36).*b.^2+98.*d).* ...
      s.*tanh(s)));
    v  = @(s) (36/7).*a.^(-1).*b.*eps.*(1+(-4).*log(cosh(s))+cosh(2.*s).*((-1)+2.* ...
      log(cosh(s)))).*sech(s).^4+12.*sech(s).^2.*tanh(s)+(3/49).*a.^(-2) ...
      .*eps.^2.*sech(s).^4.*((-2).*(35.*a1.*b+(-36).*b.^2+98.*d).*s.*((-2) ...
      +cosh(2.*s))+((-35).*a1.*b+(-48).*b.^2+588.*d+144.*b.^2.*((-2)+ ...
      log(cosh(s))).*log(cosh(s))).*sinh(2.*s)+(-36).*((-6).*b.^2+49.*d+ ...
      4.*b.^2.*log(cosh(s)).*((-7)+6.*log(cosh(s)))).*tanh(s))+(6/2401) ...
      .*a.^(-3).*eps.^3.*sech(s).^2.*(6.*b.*(980.*a1.*b+1110.*b.^2+(-49).* ...
      (20.*a.*b1+67.*d))+(-19208).*a.*e+24.*b.*log(cosh(s)).*((-490).* ...
      a1.*b+222.*b.^2+490.*a.*b1+1813.*d+84.*b.^2.*log(cosh(s)).*((-9)+ ...
      2.*log(cosh(s))))+((-5880).*a1.*b.^2+(-19386).*b.^3+147.*b.*(40.* ...
      a.*b1+351.*d)+67228.*a.*e+(-36).*b.*log(cosh(s)).*((-490).*a1.*b+ ...
      138.*b.^2+490.*a.*b1+5929.*d+168.*b.^2.*log(cosh(s)).*((-14)+5.* ...
      log(cosh(s))))).*sech(s).^2+7.*(1818.*b.^3+(-4557).*b.*d+(-6860).* ...
      a.*e+108.*b.*log(cosh(s)).*((-2).*b.^2+245.*d+2.*b.^2.*log(cosh(s) ...
      ).*((-47)+20.*log(cosh(s))))).*sech(s).^4+42.*b.*(35.*a1.*b+(-36) ...
      .*b.^2+98.*d).*s.*(4+(-4).*log(cosh(s))+((-7)+12.*log(cosh(s))).* ...
      sech(s).^2).*tanh(s));
end

w0  = 1/a*u(eps*t).*eps.^2;
w1  = 1/a*v(eps*t).*eps.^3;
ups = q0*w0 + q1*w1 + H0010*beta1 + H0001*beta2 + ...
    1/2*H2000*w0.^2 + H1100*w0.*w1 + 1/2*H0200*w1.^2 +...
    H1010*w0.*beta1 + H1001*w0.*beta2 + H0110*w1.*beta1 + ...
    H0101*w1.*beta2 + 1/2*H0002*beta2.^2 + H0011*beta1.*beta2 + ...
    1/6*H3000*w0.^3 + 1/2*H2100*w0.^2.*w1 + H1101*w0.*w1.*beta2 + ...
    1/2*H2001*w0.^2*beta2 + 1/6*H0003*beta2.^3 + ...
    1/2*H1002*w0*beta2.^2 + 1/2*H0102*w1*beta2.^2;
ups=ups+bt.x; % we shift the orbits with the equilibrium not the saddle!


%% Approximate the sadddle equilibrium
delta0 = 2;
delta2 = -2*(5*a1*b+7*d)/7/a^2;
u0inf = delta0;
u2inf = delta2;
uinf  = u0inf+u2inf.*eps.^2;
w0inf = 1/a*uinf.*eps.^2;
saddle = bt.x + q0*w0inf + H0010*beta1 + H0001*beta2 + ...
    1/2*H2000*w0inf.^2  +...
    H1010*w0inf.*beta1 + H1001*w0inf.*beta2 + ...
    1/2*H0002*beta2.^2 + H0011*beta1.*beta2 + ...
    1/6*H3000*w0inf.^3 + ...
    1/2*H2001*w0inf.^2*beta2 + 1/6*H0003*beta2.^3 + ...
    1/2*H1002*w0inf*beta2.^2;
homds.x0 = saddle;

%% Derivative of alpha with respect to epsilon, need to determine the correct
% direction of the tangent vector v
dbeta1depsison = -16/a*eps^3;
dbeta2depsilon = b/a*(2*tau0 + 4*tau2*eps^2)*eps;
dalphadepsilon = K10*dbeta1depsison + K01*dbeta2depsilon + ...
    1/2*K02*2*beta2*dbeta2depsilon + K11*(dbeta1depsison*beta2 + ...
    beta1*dbeta2depsilon) + 1/6*K03*3*beta2^2*dbeta2depsilon;
